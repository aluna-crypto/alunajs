import { IAlunaMarketSchema } from '../../../../../lib/schemas/IAlunaMarketSchema'
import {
  IGateIOMarketSchema,
  IGateIOTickerSchema,
} from '../../../schemas/IGateIOMarketSchema'



export const GATEIO_RAW_TICKERS: IGateIOTickerSchema[] = [
  {
    currency_pair: 'IHT_ETH',
    last: '0.00002996',
    lowest_ask: '0.00003104',
    highest_bid: '0.00002896',
    change_percentage: '-3.85',
    base_volume: '143282.5448701',
    quote_volume: '4.32587112009204',
    high_24h: '0.00003123',
    low_24h: '0.00002894',
    etf_net_value: '1',
    etf_pre_net_value: '1',
    etf_pre_timestamp: 1,
    etf_leverage: '1',
  },
  {
    currency_pair: 'AME_ETH',
    last: '1.1138',
    lowest_ask: '1.116',
    highest_bid: '1.1117',
    change_percentage: '0.51',
    base_volume: '65809.2083',
    quote_volume: '71999.80974652',
    high_24h: '1.1356',
    low_24h: '1.0507',
    etf_net_value: '1',
    etf_pre_net_value: '1',
    etf_pre_timestamp: 1,
    etf_leverage: '1',
  },
  {
    currency_pair: 'ALEPH_USDT',
    last: '0.0005006',
    lowest_ask: '0.0005009',
    highest_bid: '0.0004998',
    change_percentage: '2.41',
    base_volume: '230168.77357018',
    quote_volume: '113.40814428554621',
    high_24h: '0.0005074',
    low_24h: '0.0004865',
    etf_net_value: '1',
    etf_pre_net_value: '1',
    etf_pre_timestamp: 1,
    etf_leverage: '1',
  },
]

export const GATEIO_RAW_MARKETS: IGateIOMarketSchema[] = [
  {
    id: 'IHT_ETH',
    base: 'IHT',
    quote: 'ETH',
    fee: '0.2',
    min_quote_amount: '0.001',
    min_base_amount: '0.001',
    amount_precision: 1,
    precision: 9,
    trade_status: 'tradable',
    sell_start: 0,
    buy_start: 0,
    ticker: GATEIO_RAW_TICKERS[0],
  },
  {
    id: 'AME_ETH',
    base: 'AME',
    quote: 'ETH',
    fee: '0.2',
    min_quote_amount: '0.001',
    min_base_amount: '0.001',
    amount_precision: 3,
    precision: 8,
    trade_status: 'tradable',
    sell_start: 0,
    buy_start: 0,
    ticker: GATEIO_RAW_TICKERS[1],
  },
  {
    id: 'ALEPH_USDT',
    base: 'ALEPH',
    quote: 'USDT',
    fee: '0.2',
    min_quote_amount: '1',
    min_base_amount: '0.001',
    amount_precision: 3,
    precision: 4,
    trade_status: 'tradable',
    sell_start: 0,
    buy_start: 0,
    ticker: GATEIO_RAW_TICKERS[2],
  },
]


export const GATEIO_PARSED_MARKETS: IAlunaMarketSchema[] = [
  {
    pairSymbol: 'IHTETH',
    baseSymbolId: 'IHT',
    quoteSymbolId: 'ETH',
    ticker: {
      high: parseFloat(GATEIO_RAW_TICKERS[0].high_24h),
      low: parseFloat(GATEIO_RAW_TICKERS[0].low_24h),
      bid: parseFloat(GATEIO_RAW_TICKERS[0].highest_bid),
      ask: parseFloat(GATEIO_RAW_TICKERS[0].lowest_ask),
      last: parseFloat(GATEIO_RAW_TICKERS[0].last),
      date: new Date(),
      change: parseFloat(GATEIO_RAW_TICKERS[0].change_percentage),
      baseVolume: parseFloat(GATEIO_RAW_TICKERS[0].base_volume),
      quoteVolume: parseFloat(GATEIO_RAW_TICKERS[0].quote_volume),
    },
    spotEnabled: false,
    marginEnabled: false,
    derivativesEnabled: false,
  },
  {
    pairSymbol: 'AMEETH',
    baseSymbolId: 'AME',
    quoteSymbolId: 'ETH',
    ticker: {
      high: parseFloat(GATEIO_RAW_TICKERS[1].high_24h),
      low: parseFloat(GATEIO_RAW_TICKERS[1].low_24h),
      bid: parseFloat(GATEIO_RAW_TICKERS[1].highest_bid),
      ask: parseFloat(GATEIO_RAW_TICKERS[1].lowest_ask),
      last: parseFloat(GATEIO_RAW_TICKERS[1].last),
      date: new Date(),
      change: parseFloat(GATEIO_RAW_TICKERS[1].change_percentage),
      baseVolume: parseFloat(GATEIO_RAW_TICKERS[1].base_volume),
      quoteVolume: parseFloat(GATEIO_RAW_TICKERS[1].quote_volume),
    },
    spotEnabled: false,
    marginEnabled: false,
    derivativesEnabled: false,
  },
  {
    pairSymbol: 'ALEPHUSDT',
    baseSymbolId: 'ALEPH',
    quoteSymbolId: 'USDT',
    ticker: {
      high: parseFloat(GATEIO_RAW_TICKERS[2].high_24h),
      low: parseFloat(GATEIO_RAW_TICKERS[2].low_24h),
      bid: parseFloat(GATEIO_RAW_TICKERS[2].highest_bid),
      ask: parseFloat(GATEIO_RAW_TICKERS[2].lowest_ask),
      last: parseFloat(GATEIO_RAW_TICKERS[2].last),
      date: new Date(),
      change: parseFloat(GATEIO_RAW_TICKERS[2].change_percentage),
      baseVolume: parseFloat(GATEIO_RAW_TICKERS[2].base_volume),
      quoteVolume: parseFloat(GATEIO_RAW_TICKERS[2].quote_volume),
    },
    spotEnabled: false,
    marginEnabled: false,
    derivativesEnabled: false,
  },
]
